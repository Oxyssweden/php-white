#!/usr/bin/env php
<?php

# Usage :
#
#   $ sudo blinker 17 200000
#
# = Blink GPIO #17 pin with 0.2 second delay

require 'vendor/autoload.php';

use PhpGpio\Gpio;

// Am i using php-cli?
if ('cli' != PHP_SAPI) {
    echo $msg = "This script must be run using php-cli";
    throw new \Exception($msg);
}

// Am I a sudoer or the root user?
if ('root' !== $_SERVER['USER'] || empty($_SERVER['SUDO_USER'])) {
    echo $msg = "Please run this script as root, using sudo -t ; please check the README file";
    throw new \Exception($msg);
}

// Am I using only 2 integer arguments ?
if (
    !(3 === $argc)
    || (0 >= (int)($argv[1]))
    || (0 >= (int)($argv[2]))
) {
    echo $msg = "This script expect 2 positive integer arguments: please check the README file";
    throw new \Exception($msg);
}

$score = (int)$argv[1];
$sleeper = (int)$argv[2];
$gpio = new GPIO();
$arr = [18, 17, 27, 22, 5, 6, 13, 19, 26, 21];
$arrReverse = array_reverse($arr);

for($i = 0; $i < $score; $i++) {
	$gpio->setup($arr[$i], 'out');
}

// Startip animation
for($j = 0; $j < 3; $j++) {
	$delay = 55000;
	for($i = 0; $i < 10; $i++) {
		$delay -= 5000;
		$gpio->output($arr[$i], 1);
		usleep($delay);
		$gpio->output($arr[$i], 0);
	}

	$delay = 55000;
	for($i = 0; $i < 10; $i++) {
		$delay -= 5000;
		$gpio->output($arrReverse[$i], 1);
		usleep($delay);
		$gpio->output($arrReverse[$i], 0);
	}
}

// Tänd upp alla efter varandra
for($i = 0; $i < $score; $i++) {
	$gpio->output($arr[$i], 1);
	usleep(100000);
}

// Blinka 3 gånger
for($n = 0; $n < 3; $n++) {
	usleep(300000);
	// Släck
	for($j = 0; $j < $score; $j++) {
		$gpio->output($arr[$j], 0);
	}
	usleep(300000);
	// Tänd
	for($k = 0; $k < $score; $k++) {
		$gpio->output($arr[$k], 1);
	}
}

// Stäng ner allt
usleep($sleeper);
for($i = 0; $i < $score; $i++) {
	$gpio->output($arr[$i], 0);
}
$gpio->unexportAll();